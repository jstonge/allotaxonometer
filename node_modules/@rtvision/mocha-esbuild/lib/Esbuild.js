"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const fast_glob_1 = (0, tslib_1.__importDefault)(require("fast-glob"));
const esbuild_1 = require("esbuild");
const Helpers_1 = require("./Helpers");
// this function will change a property on that object so
// need to be a reference and not a copy
function addTopLevelRequire(config) {
    var _a;
    // add js to top of file if output format is ESM.
    // JS will create top level require that dependencies may need
    if (((_a = config.format) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'esm') {
        // https://github.com/evanw/esbuild/issues/946#issuecomment-814703190
        const jsBanner = `import { createRequire as topLevelCreateRequire } from 'module';\nconst require = topLevelCreateRequire(import.meta.url);`;
        addJsBanner(config, jsBanner);
    }
}
function addJsBanner(config, jsBanner) {
    if (typeof config.banner === 'undefined') {
        config.banner = {
            js: jsBanner
        };
    }
    else if (typeof config.banner.js === 'undefined') {
        config.banner.js = jsBanner;
    }
    else {
        config.banner.js = `${jsBanner}\n${config.banner.js}`;
    }
    return config;
}
async function default_1(entryPoint, outputFile, { watch, sourcemap, esbuildConfigPath, onRebuild, importSourceMapSupport }) {
    var _a, _b, _c;
    entryPoint = (0, Helpers_1.resolveRelativePath)(entryPoint);
    // doesn't return any files if just plain import path;
    let importFiles = await (0, fast_glob_1.default)(entryPoint);
    if (importFiles.length === 0)
        importFiles = [entryPoint];
    // force these specific options
    let esbuildConfig = {
        // need to have 1 central file to import the globs so create it
        stdin: {
            contents: importFiles.map(f => `import '${f}';`).join('\n'),
            resolveDir: process.cwd(),
            sourcefile: 'Tests Entry Point'
        },
        bundle: true,
        outfile: outputFile
    };
    if (typeof esbuildConfigPath === 'string') {
        esbuildConfigPath = (0, Helpers_1.resolveRelativePath)(esbuildConfigPath);
        if ((0, fs_1.existsSync)(esbuildConfigPath)) {
            const config = (await (0, Helpers_1.importESM)(esbuildConfigPath)).default;
            esbuildConfig = Object.assign(Object.assign({}, config), esbuildConfig);
            // want to use stdin and not configs entry point so remove it
            if (typeof esbuildConfig.entryPoints !== 'undefined')
                delete esbuildConfig.entryPoints;
        }
    }
    if (sourcemap) {
        esbuildConfig.sourcemap = 'inline';
        if (importSourceMapSupport) {
            const sourceMapSupport = ((_a = esbuildConfig.format) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'esm'
                ? `import 'source-map-support/register.js';`
                : `require('source-map-support').install();`;
            addJsBanner(esbuildConfig, sourceMapSupport);
        }
    }
    addTopLevelRequire(esbuildConfig);
    if (((_b = esbuildConfig.format) === null || _b === void 0 ? void 0 : _b.toLowerCase()) !== 'esm') {
        (_c = esbuildConfig.outfile) === null || _c === void 0 ? void 0 : _c.replace(/\.mjs$/, '.js');
    }
    if (watch) {
        esbuildConfig.watch = { onRebuild };
    }
    return (0, esbuild_1.build)(esbuildConfig);
}
exports.default = default_1;
