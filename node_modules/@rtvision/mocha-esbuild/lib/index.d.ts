import { Command, flags } from '@oclif/command';
declare class MochaEsbuild extends Command {
    static description: string;
    static flags: {
        bail: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        color: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        fgrep: flags.IOptionFlag<string | undefined>;
        fullTrace: flags.IOptionFlag<string | undefined>;
        grep: flags.IOptionFlag<string | undefined>;
        invert: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        timeout: flags.IOptionFlag<string | undefined>;
        require: flags.IOptionFlag<string | undefined>;
        reporter: flags.IOptionFlag<string | undefined>;
        retries: import("@oclif/parser/lib/flags").IOptionFlag<number | undefined>;
        parallel: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        jobs: import("@oclif/parser/lib/flags").IOptionFlag<number | undefined>;
        version: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        help: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        esbuildConfig: flags.IOptionFlag<string>;
        mochaConfigPath: flags.IOptionFlag<string | undefined>;
        watch: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        sourcemap: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        noImportSourceMapSupport: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
    static args: {
        name: string;
        default: string;
        description: string;
    }[];
    run(): Promise<void>;
}
export = MochaEsbuild;
